{"ast":null,"code":"var _jsxFileName = \"/Users/guilhermesilva/Desktop/code/Bliss/bliss_recruitment_api/src/components/Questions.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { NavLink, useSearchParams } from \"react-router-dom\";\nimport Search from \"./Search\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Styles = styled.div`\n    {\n       background-color: green;\n       height: 100vh; \n    }\n`;\n_c = Styles;\n\nfunction Questions() {\n  _s();\n\n  const [health, setHealth] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [offset, setOffset] = useState(10);\n  const [filter, setFilter] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get(\"filter\") || \"\";\n  useEffect(() => {\n    async function getHealth() {\n      const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n      setHealth(response.data);\n    }\n\n    getHealth();\n\n    async function getAllQuestions() {\n      console.log(filter);\n      const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/questions?limit=10&offset=${offset}&filter=${filter}`);\n      setQuestions(response.data);\n    }\n\n    getAllQuestions();\n  }, []); // useEffect(() => {\n  //     async function getAllQuestions() {\n  //       const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/questions?limit=5&offset=5&filter=${filter}`);\n  //       setQuestions(response.data);\n  //     }\n  //     getAllQuestions();\n  // }, []);\n\n  const handleRefresh = async () => {\n    const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n    setHealth(response.data);\n  }; // const handleSearch = (search) => {\n  //     setFilter(search)\n  //     console.log(filter)\n  // }\n\n\n  const handleSearch = e => {\n    const filter = e.target.value;\n\n    if (filter) {\n      psetSearch(filter);\n      setSearchParams({\n        filter\n      });\n    } else {\n      setSearchParams({});\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Styles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), health.status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: health.status === \"OK\" ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: questions.map(element => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(NavLink, {\n              to: `/questions/${element.id}`,\n              children: element.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 41\n            }, this)\n          }, element.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRefresh(),\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Questions, \"bZyGOiS+pK23Y/Gg/9i0SM4l+fU=\", false, function () {\n  return [useSearchParams];\n});\n\n_c2 = Questions;\n;\nexport default Questions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"Questions\");","map":{"version":3,"sources":["/Users/guilhermesilva/Desktop/code/Bliss/bliss_recruitment_api/src/components/Questions.js"],"names":["useState","useEffect","axios","NavLink","useSearchParams","Search","styled","Styles","div","Questions","health","setHealth","questions","setQuestions","offset","setOffset","filter","setFilter","searchParams","setSearchParams","search","get","getHealth","response","data","getAllQuestions","console","log","handleRefresh","handleSearch","e","target","value","psetSearch","status","map","element","id","question"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { NavLink, useSearchParams } from \"react-router-dom\";\n\nimport Search from \"./Search\";\n\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n    {\n       background-color: green;\n       height: 100vh; \n    }\n`;\n\nfunction Questions( ) {\n    const [health, setHealth] = useState([]);\n    const [questions, setQuestions] = useState([]);\n    const [offset, setOffset] = useState(10)\n    const [filter, setFilter] = useState(\"\");\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const search = searchParams.get(\"filter\") || \"\";\n\n    useEffect(() => {\n        async function getHealth() {\n          const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n          setHealth(response.data);\n        }\n        getHealth();\n\n        async function getAllQuestions() {\n            console.log(filter)\n            const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/questions?limit=10&offset=${offset}&filter=${filter}`);\n            setQuestions(response.data);\n          }\n          getAllQuestions();\n    }, []);\n\n    // useEffect(() => {\n    //     async function getAllQuestions() {\n    //       const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/questions?limit=5&offset=5&filter=${filter}`);\n    //       setQuestions(response.data);\n    //     }\n    //     getAllQuestions();\n    // }, []);\n\n    const handleRefresh = async () => {\n        const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n        setHealth(response.data);\n    }\n\n    // const handleSearch = (search) => {\n    //     setFilter(search)\n    //     console.log(filter)\n    // }\n\n    const handleSearch = (e) => {\n        const filter = e.target.value;\n\n        if (filter) {\n            psetSearch(filter)\n            setSearchParams({ filter });\n        } else {\n            setSearchParams({});\n        }\n    };\n\n    return (\n        <Styles>\n            <h2>Questions</h2>\n            {/* <Search setSearch={handleSearch} /> */}\n\n\n\n            {health.status ? (\n                <>\n                    {health.status === \"OK\" ? (\n                        <ul>\n                            {questions.map((element) => {\n                                return (\n                                    <li key={element.id}>\n                                        <NavLink to={`/questions/${element.id}`}>{element.question}</NavLink>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    ) : (\n                        <button onClick={() => handleRefresh()}>Refresh</button>\n                    )}\n                </>\n            ) : (\n                <p>Loading</p>\n            )}\n        </Styles>\n    );\n};\n\nexport default Questions;"]},"metadata":{},"sourceType":"module"}