{"ast":null,"code":"var _jsxFileName = \"/Users/guilhermesilva/Desktop/code/Bliss/bliss_recruitment_api/src/components/Questions.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { NavLink } from \"react-router-dom\";\nimport Search from \"./\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Styles = styled.div`\n    {\n       background-color: green;\n       height: 100vh; \n    }\n`;\n_c = Styles;\n\nfunction Questions() {\n  _s();\n\n  const [health, setHealth] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    async function getHealth() {\n      const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n      setHealth(response.data);\n    }\n\n    getHealth();\n  }, []);\n  useEffect(() => {\n    async function getAllQuestions() {\n      const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/questions?limit=5&offset=5&filter=choice`);\n      setQuestions(response.data);\n    }\n\n    getAllQuestions();\n  }, []);\n\n  const handleRefresh = async () => {\n    const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n    setHealth(response.data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Styles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), health.status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: health.status === \"OK\" ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: questions.map(element => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(NavLink, {\n              to: `/questions/${element.id}`,\n              children: element.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 41\n            }, this)\n          }, element.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRefresh(),\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Questions, \"hqOEPTCoNuDy69jeIgVgYnV6yms=\");\n\n_c2 = Questions;\n;\nexport default Questions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"Questions\");","map":{"version":3,"sources":["/Users/guilhermesilva/Desktop/code/Bliss/bliss_recruitment_api/src/components/Questions.js"],"names":["useState","useEffect","axios","NavLink","Search","styled","Styles","div","Questions","health","setHealth","questions","setQuestions","getHealth","response","get","data","getAllQuestions","handleRefresh","status","map","element","id","question"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,OAAOC,MAAP,MAAmB,IAAnB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,GAAI;AAC1B;AACA;AACA;AACA;AACA,CALA;KAAMD,M;;AAON,SAASE,SAAT,GAAsB;AAAA;;AAClB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeY,SAAf,GAA2B;AACzB,YAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,4EAAX,CAAvB;AACAL,MAAAA,SAAS,CAACI,QAAQ,CAACE,IAAV,CAAT;AACD;;AACDH,IAAAA,SAAS;AACZ,GANQ,EAMN,EANM,CAAT;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAegB,eAAf,GAAiC;AAC/B,YAAMH,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,8GAAX,CAAvB;AACAH,MAAAA,YAAY,CAACE,QAAQ,CAACE,IAAV,CAAZ;AACD;;AACDC,IAAAA,eAAe;AAClB,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMC,aAAa,GAAG,YAAY;AAC9B,UAAMJ,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,4EAAX,CAAvB;AACAL,IAAAA,SAAS,CAACI,QAAQ,CAACE,IAAV,CAAT;AACH,GAHD;;AAKA,sBACI,QAAC,MAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKP,MAAM,CAACU,MAAP,gBACG;AAAA,gBACKV,MAAM,CAACU,MAAP,KAAkB,IAAlB,gBACG;AAAA,kBACKR,SAAS,CAACS,GAAV,CAAeC,OAAD,IAAa;AACxB,8BACI;AAAA,mCACI,QAAC,OAAD;AAAS,cAAA,EAAE,EAAG,cAAaA,OAAO,CAACC,EAAG,EAAtC;AAAA,wBAA0CD,OAAO,CAACE;AAAlD;AAAA;AAAA;AAAA;AAAA;AADJ,aAASF,OAAO,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SANA;AADL;AAAA;AAAA;AAAA;AAAA,cADH,gBAWG;AAAQ,QAAA,OAAO,EAAE,MAAMJ,aAAa,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZR,qBADH,gBAiBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GAjDQV,S;;MAAAA,S;AAiDR;AAED,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { NavLink } from \"react-router-dom\";\n\nimport Search from \"./\";\n\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n    {\n       background-color: green;\n       height: 100vh; \n    }\n`;\n\nfunction Questions( ) {\n    const [health, setHealth] = useState([]);\n    const [questions, setQuestions] = useState([]);\n\n    useEffect(() => {\n        async function getHealth() {\n          const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n          setHealth(response.data);\n        }\n        getHealth();\n    }, []);\n\n    useEffect(() => {\n        async function getAllQuestions() {\n          const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/questions?limit=5&offset=5&filter=choice`);\n          setQuestions(response.data);\n        }\n        getAllQuestions();\n    }, []);\n\n    const handleRefresh = async () => {\n        const response = await axios.get(`https://private-anon-e7b3f01cb5-blissrecruitmentapi.apiary-mock.com/health`);\n        setHealth(response.data);\n    }\n\n    return (\n        <Styles>\n            <h2>Questions</h2>\n            {health.status ? (\n                <>\n                    {health.status === \"OK\" ? (\n                        <ul>\n                            {questions.map((element) => {\n                                return (\n                                    <li key={element.id}>\n                                        <NavLink to={`/questions/${element.id}`}>{element.question}</NavLink>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    ) : (\n                        <button onClick={() => handleRefresh()}>Refresh</button>\n                    )}\n                </>\n            ) : (\n                <p>Loading</p>\n            )}\n        </Styles>\n    );\n};\n\nexport default Questions;"]},"metadata":{},"sourceType":"module"}